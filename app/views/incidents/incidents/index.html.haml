%h1 Listing #{pluralize collection.total_count, 'Incident'}

.well#filter-form
  =search_form_for search, url: url_for(), class: "form", style: "margin-bottom: 0" do |f|
    - proto = Incidents::Incident.new chapter: current_chapter
    /%table
    /  %tr
    .row.collapse
      .col-sm-2=f.label :address_cont
      .col-sm-2=f.label :city_cont
      .col-sm-2=f.label :county_cont
      .col-sm-2=f.label :date_gteq, 'After'
      .col-sm-2=f.label :date_lteq, 'Before'
    /%tr
    .row
      %div
        .form-group
          .col-sm-2
            =f.text_field :address_cont, class: 'form-control', placeholder: 'Address'
        .form-group
          .col-sm-2
            =f.text_field :city_cont,    class: 'form-control', placeholder: 'City'
        .form-group
          .col-sm-2
            =f.text_field :county_cont,  class: 'form-control', placeholder: 'County'
        .form-group
          .col-sm-3
            =f.date_field :date_gteq,    class: 'form-control', placeholder: 'After YYYY-MM-DD'
        .form-group
          .col-sm-3
            =f.date_field :date_lteq,    class: 'form-control', placeholder: 'Before YYYY-MM-DD'
    .row(style="margin-top: 15px")
      .col-sm-5
        =f.label :incident_type_in
        =f.select :incident_type_in, options_from_collection_for_select(proto.humanized_incident_types, :value, :humanized, search.incident_type_in), {include_blank: true}, class: 'form-control'
      .col-sm-4
        =label_tag :show_statistics
        =check_box_tag :show_statistics, '1', params[:show_statistics]

        =f.label :status_in
        - proto.humanized_statuses.each do |status|
          - id="q_status_in_#{status.value}"
          =check_box_tag 'q[status_in][]', status.value, search.status_in.try(:include?, status.value), {id: id}
          =label_tag id, status.humanized
      .col-sm-2
        =f.submit class: 'btn btn-primary'

-if params[:show_statistics]
  .row
    .col-sm-5
      - stats = collection_for_stats.valid.incident_stats
      - resources = Incidents::Incident.count_resources(collection_for_stats.valid, @chapter.incidents_resources_tracked_array)
      %table.table.table-bordered
        %tr
          %th Responses
          %td=num stats.incident_count
        %tr
          %th No Response
          %td=num collection_for_stats.with_status('invalid').where{incident_type.in(['not_eligible_for_services', 'no_response_needed'])}.count
        %tr
          %th Clients
          %td=num stats.client_count
        %tr
          %th Adults
          %td=num stats.num_adults
        %tr
          %th Children
          %td
            =num stats.num_children
            -if stats.num_children && stats.client_count
              (#{number_to_percentage (stats.num_children.to_f/stats.client_count)*100, precision: 0})
        %tr
          %th Responder Miles Driven
          %td=num total_miles_driven(collection_for_stats.valid)
        %tr
          %th Average Response Time
          %td=average_response_time(collection_for_stats.valid)
        -if current_chapter.incidents_collect_case_details
          - assistance = assistance_totals(collection_for_stats.valid)
          %tr
            %th Assistance
            %td=number_to_currency assistance.map(&:total_assistance).sum, precision: 0
          %tr
            %th Cases
            %td=num assistance.map(&:num_cases).sum
          %tr
            - with_assistance = assistance.detect{|a| a.total_assistance > 0}
            %th Case Average
            %td
              -if with_assistance
                =number_to_currency with_assistance.total_assistance/with_assistance.num_cases, precision: 0
        -else
          %tr
            %th Cases
            %td=num stats.case_count
        %tr
          %th Items Given
          %td.table-nested-container
            %table.table.table-bordered.table-condensed.table-nested
              - resources.each do |res, val|
                %tr
                  %th=res.titleize
                  %td=val
    .col-sm-7
      .all-incidents-map{style: "height: 500px"}

.incidents-table
  =render 'index_table'

- content_for :footer_js do
  = google_maps_javascript
  :javascript
    config = #{map_config.to_json};
    allIncidentsMapController = new AllIncidentsHeatmapController(#{map_json_for(collection_for_stats).to_json}, 'marker', config);
