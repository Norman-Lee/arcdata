require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Incidents::RespondersController do
  include LoggedIn
  before(:each) {@person.chapter.incidents_enable_dispatch_console = true; @person.chapter.save!;}

  # This should return the minimal set of attributes required to create a valid
  # Incidents::Responder. As you add validations to Incidents::Responder, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.build(:responder_assignment, incident: incident, person: person).attributes }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Incidents::RespondersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:incident) { FactoryGirl.create :incident }
  let(:person) { FactoryGirl.create :person, work_phone_carrier: FactoryGirl.create(:cell_carrier) }

  before :each do
    grant_role! 'submit_incident_report'
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Incidents::Responder" do
        expect {
          post :create, {:incidents_responder_assignment => valid_attributes, incident_id: incident.to_param}, valid_session
        }.to change(Incidents::ResponderAssignment, :count).by(1)
      end

      it "redirects to index" do
        post :create, {:incidents_responder_assignment => valid_attributes, incident_id: incident.to_param}, valid_session
        response.should redirect_to(incidents_incident_responders_url(incident))
      end

      it "triggers the assignment mailers with a responding role" do
        Incidents::RespondersMailer.should_receive(:assign_sms).and_return(double deliver: true)
        Incidents::RespondersMailer.should_receive(:assign_email).and_return(double deliver: true)
        post :create, {:incidents_responder_assignment => valid_attributes.merge(role: 'team_lead'), incident_id: incident.to_param, send_assignment_sms: true, send_assignment_email: true}, valid_session
      end

      it "triggers the assignment mailers with a non-responding role" do
        Incidents::RespondersMailer.should_not_receive(:assign_sms)
        Incidents::RespondersMailer.should_not_receive(:assign_email)
        post :create, {:incidents_responder_assignment => valid_attributes.merge(role: 'not_available'), incident_id: incident.to_param, send_assignment_sms: true, send_assignment_email: true}, valid_session
      end
    end
  end

  describe "GET index" do
    it "should succeed" do
      get :index, {incident_id: incident.to_param}
      response.should be_success
    end

    it "should set the flash if incident doesn't have a location" do
      incident.update_attributes lat: nil, lng: nil
      get :index, {incident_id: incident.to_param}
      response.should be_success
      flash.now[:error].should_not be_empty
    end
  end

  describe "GET new" do
    it "should succeed" do
      get :new, {incident_id: incident.to_param}
      response.should be_success

      controller.send(:person).should == nil
    end

    it "should assign the person if given" do
      person = FactoryGirl.create :person
      get :new, {incident_id: incident.to_param, person_id: person.id}
      response.should be_success

      controller.send(:person).should == person
      controller.send(:resource).person_id.should == person.id
    end
  end


  it "should not allow records for duplicate people to be created"

end
