require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Incidents::IncidentsController do
  include LoggedIn

  before(:each) do
    @person.update_attribute :last_name, 'Laxson'
  end

  describe "#needs_report" do
    it "displays the list" do
      inc = FactoryGirl.create :incident
      inc2 = FactoryGirl.create :dat_incident
      Incidents::Incident.count.should == 2

      get :needs_report

      response.should be_success
      controller.send(:needs_report_collection).should =~ [inc]
    end
  end

  describe "#link_cas" do
    it "displays the list" do
      cas = FactoryGirl.create :cas_incident
      cas2 = FactoryGirl.create :cas_incident
      inc = FactoryGirl.create :incident
      inc2 = FactoryGirl.create :incident

      inc.link_to_cas_incident(cas2)

      get :link_cas

      response.should be_success
      controller.send(:cas_incidents_to_link).should =~ [cas]
    end

    it "can link an incident" do
      cas = FactoryGirl.create :cas_incident
      inc = FactoryGirl.create :incident

      post :link_cas, cas_id: cas.id, incident_id: inc.id
      response.should be_success

      inc.reload.cas_incident_number.should == cas.cas_incident_number
    end

    it "can promote to an incident" do
      cas = FactoryGirl.create :cas_incident
      FactoryGirl.create :county, name: cas.county_name
      expect {
        post :link_cas, cas_id: cas.id, commit: 'Promote to Incident'
        response.should be_success
      }.to change(Incidents::Incident, :count).by(1)

      Incidents::Incident.where(cas_incident_number: cas.cas_incident_number).first.should_not be_nil
    end

  end

  describe "#show" do
    it "should succeed with no cas or dat" do
      inc = FactoryGirl.create :incident
      get :show, id: inc.to_param
      response.should be_success
    end

    it "should succeed with cas" do
      inc = FactoryGirl.create :incident
      cas = FactoryGirl.create :cas_incident
      inc.link_to_cas_incident cas

      get :show, id: inc.to_param
      response.should be_success
    end

    it "should succeed with dat" do
      inc = FactoryGirl.create :incident
      dat = FactoryGirl.create :dat_incident, incident: inc
      get :show, id: inc.to_param
      response.should be_success
    end
  end

end
